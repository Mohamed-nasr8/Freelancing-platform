// <auto-generated />
using System;
using Crowdsourcing.DL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Crowdsourcing.DL.Migrations
{
    [DbContext(typeof(CrowdsourcingContext))]
    [Migration("20230215111534_intial")]
    partial class intial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Registrationdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("verifacationState")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FeildOfStudy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Expereince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Expereinces");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("VerficationState")
                        .HasColumnType("bit");

                    b.Property<int>("VerificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.FreelancerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("FreelancerServices");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.HasFreelancerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int>("FreelancerServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("FreelancerServiceId");

                    b.ToTable("HasFreelancerServices");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.HasSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("SkillId");

                    b.ToTable("HasSkills");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("LangName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.OtherSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SkillId");

                    b.ToTable("OtherSkills");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Comment")
                        .HasColumnType("int");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("N_of_people")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Payment_amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("Payment_typeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("VerificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SkillId");

                    b.HasIndex("VerificationId")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.ToTable("user_account");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int?>("FreelancerId1")
                        .HasColumnType("int");

                    b.Property<string>("FrontImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId")
                        .IsUnique();

                    b.HasIndex("FreelancerId1");

                    b.ToTable("Verifications");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Withdraw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Withdraws");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ProposalId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.Property<int?>("ProposalStatusCatalogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ProposalId");

                    b.HasIndex("ProposalStatusCatalogId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeleveryTime")
                        .HasColumnType("int");

                    b.Property<string>("Descripion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProposalStatusCatalogId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProposalTime")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ProposalStatusCatalogId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.ProposalStatusCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.ToTable("ProposalStatusCatalogs");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Client", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.UserAccount", "UserAccount")
                        .WithMany("Clients")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Education", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("Educations")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Expereince", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("Expereinces")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Freelancer", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.UserAccount", "UserAccount")
                        .WithMany("Freelanceres")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.HasFreelancerService", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("HasFreelancerServices")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.FreelancerService", "FreelancerService")
                        .WithMany("HasFreelancerServices")
                        .HasForeignKey("FreelancerServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("FreelancerService");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.HasSkill", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("HasSkills")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.Skill", "Skill")
                        .WithMany("HasSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Language", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("Languages")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Notification", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("Notifications")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.OtherSkills", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Service", "Service")
                        .WithMany("OtherSkills")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.Skill", "Skill")
                        .WithMany("OtherSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Rating", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Client", "Client")
                        .WithMany("Ratings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("Ratings")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Service", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Client", "Client")
                        .WithMany("Services")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.PaymentType", "PaymentType")
                        .WithMany("Services")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.Skill", "Skill")
                        .WithMany("Services")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.Verification", "Verification")
                        .WithOne("Service")
                        .HasForeignKey("Crowdsourcing.DL.Entity.Service", "VerificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("PaymentType");

                    b.Navigation("Skill");

                    b.Navigation("Verification");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Verification", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithOne("Verification")
                        .HasForeignKey("Crowdsourcing.DL.Entity.Verification", "FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", null)
                        .WithMany("Verifications")
                        .HasForeignKey("FreelancerId1");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Withdraw", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("Withdraws")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.PaymentType", "PaymentType")
                        .WithMany("Withdraws")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Attachment", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Models.Message", "Message")
                        .WithMany("Attachment")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Contract", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Models.Proposal", "Proposal")
                        .WithMany("Contracts")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("PaymentType");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Message", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("Messages")
                        .HasForeignKey("FreelancerId");

                    b.HasOne("Crowdsourcing.DL.Models.Proposal", "Proposal")
                        .WithMany("Message")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Models.ProposalStatusCatalog", "ProposalStatusCatalog")
                        .WithMany("Messages")
                        .HasForeignKey("ProposalStatusCatalogId");

                    b.Navigation("Client");

                    b.Navigation("Freelancer");

                    b.Navigation("Proposal");

                    b.Navigation("ProposalStatusCatalog");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Proposal", b =>
                {
                    b.HasOne("Crowdsourcing.DL.Entity.Freelancer", "Freelancer")
                        .WithMany("Proposals")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Models.ProposalStatusCatalog", "ProposalStatusCatalog")
                        .WithMany("Proposals")
                        .HasForeignKey("ProposalStatusCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdsourcing.DL.Entity.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("PaymentType");

                    b.Navigation("ProposalStatusCatalog");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Client", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Ratings");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Freelancer", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Expereinces");

                    b.Navigation("HasFreelancerServices");

                    b.Navigation("HasSkills");

                    b.Navigation("Languages");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Proposals");

                    b.Navigation("Ratings");

                    b.Navigation("Verification")
                        .IsRequired();

                    b.Navigation("Verifications");

                    b.Navigation("Withdraws");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.FreelancerService", b =>
                {
                    b.Navigation("HasFreelancerServices");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.PaymentType", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("Withdraws");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Service", b =>
                {
                    b.Navigation("OtherSkills");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Skill", b =>
                {
                    b.Navigation("HasSkills");

                    b.Navigation("OtherSkills");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.UserAccount", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Freelanceres");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Entity.Verification", b =>
                {
                    b.Navigation("Service")
                        .IsRequired();
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Message", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.Proposal", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Crowdsourcing.DL.Models.ProposalStatusCatalog", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Proposals");
                });
#pragma warning restore 612, 618
        }
    }
}
